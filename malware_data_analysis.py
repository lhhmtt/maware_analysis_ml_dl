#!/usr/bin/env python
# coding: utf-8

# In[3]:


from sklearn.naive_bayes import GaussianNB, BernoulliNB
from sklearn.metrics import accuracy_score, classification_report
from sklearn.ensemble import BaggingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import SGDClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import cohen_kappa_score
from sklearn.metrics import confusion_matrix
from sklearn.ensemble import RandomForestClassifier

from sklearn import preprocessing
# import torch
from sklearn.neural_network import MLPClassifier
from sklearn import svm
from sklearn.svm import SVC
from sklearn import tree
import pandas as pd
from sklearn.externals import joblib
import pickle
import numpy as np
import seaborn as sns
#from joblib import dump, load

from tensorflow.keras.layers import Embedding
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.preprocessing.text import one_hot
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Bidirectional
from tensorflow.keras.layers import Dropout

# read a csv file
df = pd.read_csv('train.csv')
# df.head(5)

X_train, X_test, y_train, y_test = train_test_split(df.iloc[:, 0:215], df['type'], test_size=0.20, random_state=42)
# X_train.info(5)
    
def NaiveBayes():
    # Naive Bayes algorithm
    gnb = GaussianNB()
    gnb.fit(X_train, y_train)

    # pred
    pred = gnb.predict(X_test)
    # print(pred)

    # accuracy
    accuracy = accuracy_score(pred, y_test)
    
    print("naive_bayes")
    print(accuracy)
#     output Precision, Recall and F1-score
    print(classification_report(pred, y_test, labels=None))
    print("COHEN")
    print(cohen_kappa_score(y_test, pred))
    cm=confusion_matrix(y_test, pred)
    print(cm)
    
    print('Resulting label of file:')
    df = pd.read_csv('output_real_1.csv')
    test = df.iloc[:, 0:215]
#     print(rdF.predict(test))
    result = rdF.predict(test)
    print(result)
    
def DecisionTree():
    clf = tree.DecisionTreeClassifier(random_state=45)
    clf.fit(X_train, y_train)

    # Read the csv test file
    pred = clf.predict(X_test)
    # accuracy
    accuracy = accuracy_score(y_test,pred)
    print(clf)
    print(accuracy)
    print(classification_report(y_test,pred, labels=None))
    print("COHEN")
    print(cohen_kappa_score(y_test, pred))
    cm=confusion_matrix(y_test, pred)
    print(cm)
    
    print('Resulting label of file:')
    df = pd.read_csv('output_real_1.csv')
    test = df.iloc[:, 0:215]
#     print(rdF.predict(test))
    result = rdF.predict(test)
    print(result)
    
def KNeighborsClassifier():
    # kneighbors algorithm

    for i in range(3,15,3):
    
        neigh = KNeighborsClassifier(n_neighbors=i)
        neigh.fit(X_train, y_train)
        pred = neigh.predict(X_test)
        # accuracy
        accuracy = accuracy_score(pred, y_test)
        print("kneighbors {}".format(i))
        print(accuracy)
        print(classification_report(pred, y_test, labels=None))
        print("cohen kappa score")
        print(cohen_kappa_score(y_test, pred))
        print("")

    cm=confusion_matrix(y_test, pred)
    print(cm)
    
    print('Resulting label of file:')
    df = pd.read_csv('output_real_1.csv')
    test = df.iloc[:, 0:215]
#     print(rdF.predict(test))
    result = rdF.predict(test)
    print(result)
    
def SVM_rbf():
    Sv=svm.SVC(kernel='rbf')
    Sv.fit(X_train, y_train)

    pred = Sv.predict(X_test)
    # accuracy
    accuracy = accuracy_score(y_test,pred)
    print(Sv)
    print(accuracy)
    print(classification_report(y_test,pred, labels=None))
    print("COHEN")
    print(cohen_kappa_score(y_test, pred))
    cm=confusion_matrix(y_test, pred)
    print(cm)
    
    print('Resulting label of file:')
    df = pd.read_csv('output_real_1.csv')
    test = df.iloc[:, 0:215]
#     print(rdF.predict(test))
    result = rdF.predict(test)
    print(result)
    
def SVM_linear():
    Sv = SVC(gamma=0.01, kernel = 'linear')
    Sv.fit(X_train, y_train)

    pred = Sv.predict(X_test)
    # accuracy
    accuracy = accuracy_score(y_test,pred)
    print(Sv)
    print(accuracy)
    print(classification_report(y_test,pred, labels=None))
    print("COHEN")
    print(cohen_kappa_score(y_test, pred))
    cm=confusion_matrix(y_test, pred)
    print(cm)
    
    print('Resulting label of file:')
    df = pd.read_csv('output_real_1.csv')
    test = df.iloc[:, 0:215]
#     print(rdF.predict(test))
    result = rdF.predict(test)
    print(result)
    
def SVM_poly():
    Sv = SVC(gamma=0.01, kernel = 'poly')
    Sv.fit(X_train, y_train)

    pred = Sv.predict(X_test)
    # accuracy
    accuracy = accuracy_score(y_test,pred)
    print(Sv)
    print(accuracy)
    print(classification_report(y_test,pred, labels=None))
    print("COHEN")
    print(cohen_kappa_score(y_test, pred))
    cm=confusion_matrix(y_test, pred)
    print(cm)
    
    print('Resulting label of file:')
    df = pd.read_csv('output_real_1.csv')
    test = df.iloc[:, 0:215]
#     print(rdF.predict(test))
    result = rdF.predict(test)
    print(result)
    
def SVM_sigmoid():
    Sv = SVC(gamma=0.01, kernel = 'sigmoid')
    Sv.fit(X_train, y_train)

    pred = Sv.predict(X_test)
    # accuracy
    accuracy = accuracy_score(y_test,pred)
    print(Sv)
    print(accuracy)
    print(classification_report(y_test,pred, labels=None))
    print("COHEN")
    print(cohen_kappa_score(y_test, pred))
    cm=confusion_matrix(y_test, pred)
    print(cm)
    
    print('Resulting label of file:')
    df = pd.read_csv('output_real_1.csv')
    test = df.iloc[:, 0:215]
#     print(rdF.predict(test))
    result = rdF.predict(test)
    print(result)
    
def RandomForest_10():
    rdF=RandomForestClassifier(n_estimators=10, max_depth=50,random_state=45)
    rdF.fit(X_train,y_train)
    pred=rdF.predict(X_test)
    cm=confusion_matrix(y_test, pred)

    accuracy = accuracy_score(y_test,pred)
    print(rdF)
    print(accuracy)
    print(classification_report(y_test,pred, labels=None))
    print("COHEN")
    print(cohen_kappa_score(y_test, pred))
    print(cm)
    
    print('Resulting label of file:')
    df = pd.read_csv('output_real_1.csv')
    test = df.iloc[:, 0:215]
#     print(rdF.predict(test))
    result = rdF.predict(test)
    print(result)
    
def RandomForest_50():    
    rdF=RandomForestClassifier(n_estimators=50, max_depth=50,random_state=45)
    rdF.fit(X_train,y_train) #model 
    pred=rdF.predict(X_test)
    cm=confusion_matrix(y_test, pred)

    accuracy = accuracy_score(y_test,pred)
    print(rdF)
    print(accuracy)
    print(classification_report(y_test,pred, labels=None))
    print("COHEN")
    print(cohen_kappa_score(y_test, pred))
    print(cm)
    
    print('Resulting label of file:')
    df = pd.read_csv('output_real_1.csv')
    test = df.iloc[:, 0:215]
#     print(rdF.predict(test))
    result = rdF.predict(test)
    print(result)

def RandomForest_100():
    rdF=RandomForestClassifier(n_estimators=100, max_depth=50,random_state=45)
    rdF.fit(X_train,y_train)
    pred=rdF.predict(X_test)
    cm=confusion_matrix(y_test, pred)

    accuracy = accuracy_score(y_test,pred)
    print(rdF)
    print(accuracy)
    print(classification_report(y_test,pred, labels=None))
    print("COHEN")
    print(cohen_kappa_score(y_test, pred))
    print(cm)
    
    print('Resulting label of file:')
    df = pd.read_csv('output_real_1.csv')
    test = df.iloc[:, 0:215]
#     print(rdF.predict(test))
    result = rdF.predict(test)
    print(result)
    
def RandomForest_250():
    rdF=RandomForestClassifier(n_estimators=250, max_depth=50,random_state=45)
    rdF.fit(X_train,y_train)
    pred=rdF.predict(X_test)
    cm=confusion_matrix(y_test, pred)

    accuracy = accuracy_score(y_test,pred)
    print(rdF)
    print(accuracy)
    print(classification_report(y_test,pred, labels=None))
    print("COHEN")
    print(cohen_kappa_score(y_test, pred))
    print(cm)

    print('Resulting label of file:')
    df = pd.read_csv('output_real_1.csv')
    test = df.iloc[:, 0:215]
#     print(rdF.predict(test))
    result = rdF.predict(test)
    print(result)
    
def MLP():
    mlp = MLPClassifier(hidden_layer_sizes=(30,30,30), random_state=42)
    mlp.fit(X_train,y_train)
    predictions = mlp.predict(X_test)
    print(mlp)
    print(confusion_matrix(y_test,predictions))
    print(accuracy_score(y_test,predictions))
    print(classification_report(y_test,predictions))
    print("COHEN")
    print(cohen_kappa_score(y_test, predictions))
    
    print('\nResulting label of file:\n')
    # clf.predict(X_test)
    df = pd.read_csv('output_real_1.csv')
    test = df.iloc[:, 1:215]
    print(mlp.predict(test))
    
    print('Resulting label of file:')
    df = pd.read_csv('output_real_1.csv')
    test = df.iloc[:, 0:215]
#     print(rdF.predict(test))
    result = rdF.predict(test)
    print(result)

def LSTM():
    ### Vocabulary size
    voc_size=5000
    sent_length=20
    ## Creating model
    embedding_vector_features=40
    model=Sequential()
    model.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))
    model.add(LSTM(100))
    model.add(Dense(1,activation='sigmoid'))
    model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
#     print(model.summary()) #output model of params

    ### Finally Training
    model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=10,batch_size=64)
    y_pred1=model.predict_classes(X_test)
    confusion_matrix(y_test,y_pred1)
    accuracy_score(y_test,y_pred1)
    print(classification_report(y_test,y_pred1))
    
    print('\nResulting label of file:\n')
    model.predict_classes(X_test)
    df = pd.read_csv('output_real_1.csv')
    test = df.iloc[:, 1:215]
#     print(model.predict_classes(test))
    result = model.predict_classes(test)
    print(result)

def BiLSTM():
    ### Vocabulary size
    voc_size=5000
    sent_length=20
    ## Creating model
    embedding_vector_features=40
    model=Sequential()
    model.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))
    model.add(Bidirectional(LSTM(100)))
    model.add(Dropout(0.3))
    model.add(Dense(1,activation='sigmoid'))
    model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
#     print(model.summary()) #output model of params

    ### Finally Training
    model.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=10,batch_size=64)
    y_pred1=model.predict_classes(X_test)
    confusion_matrix(y_test,y_pred1)
    accuracy_score(y_test,y_pred1)
    print(classification_report(y_test,y_pred1))
    
    print('\nResulting label of file:\n')
    model.predict_classes(X_test)
    df = pd.read_csv('output_real_1.csv')
    test = df.iloc[:, 1:215]
#     print(model.predict_classes(test))
    result = model.predict_classes(test)
    print(result)
    
RandomForest_250()


# In[ ]:




